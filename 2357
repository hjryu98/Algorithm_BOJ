#include <iostream>
#include <algorithm>
using namespace std;

int n, m;
int arr[100010];
pair<int, int> tree[400040]; //max, min

pair<int, int> init(int node, int s, int e) {
	if (s == e) {
		return { tree[node].first = arr[s], tree[node].second = arr[s] };
	}
	int mid = (s + e) / 2;
	pair<int, int> left = init(node * 2, s, mid);
	pair<int, int> right = init(node * 2 + 1, mid + 1, e);

	return tree[node] = { max(left.first, right.first), min(left.second, right.second) };

}

pair<int, int> query(int node, int s, int e, int l, int r) {
	if (r < s || e < l) return { -1, 9999999999 };

	if (l <= s && e <= r) return { tree[node].first, tree[node].second };

	int mid = (s + e) / 2;
	pair<int, int> left = query(node * 2, s, mid, l, r);
	pair<int, int> right = query(node * 2 + 1, mid + 1, e, l, r);

	return { max(left.first, right.first), min(left.second, right.second) };

}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	cin >> n >> m;
	for (int i = 1; i <= n; i++) cin >> arr[i];

	init(1, 1, n);
	while (m--) {
		int a, b;
		cin >> a >> b;

		pair<int, int> ans = query(1, 1, n, a, b);
		cout << ans.second << " " << ans.first << "\n";
	}

	return 0;
}
