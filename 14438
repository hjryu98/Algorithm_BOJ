#include <iostream>
#include <algorithm>
using namespace std;

int arr[100010];
int tree[400040];
int n, m;

int makesegtree(int node, int s, int e) {
	if (s == e) return tree[node] = arr[s];

	int mid = (s + e) / 2;
	int left = makesegtree(node * 2, s, mid);
	int right = makesegtree(node * 2 + 1, mid + 1, e);

	return tree[node] = min(left, right);
}

int update(int node, int s, int e, int idx, int val) {
	if (idx < s || e < idx) return tree[node];

	if (s == e) return tree[node] = val;

	int mid = (s + e) / 2;

	return tree[node] = min(update(node * 2, s, mid, idx, val), update(node * 2 + 1, mid + 1, e, idx, val));
}

int query(int node, int s, int e, int l, int r) {
	if (r < s || e < l) return 9999999999;

	if (l <= s && e <= r) return tree[node];

	int mid = (s + e) / 2;

	return min(query(node * 2, s, mid, l, r), query(node * 2 + 1, mid + 1, e, l, r));
}


int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	cin >> n;
	for (int i = 1; i <= n; i++) cin >> arr[i];

	cin >> m;
	makesegtree(1, 1, n);

	for (int i = 0; i < m; i++) {
		int a, b, c;
		cin >> a >> b >> c;

		if (a == 1) update(1, 1, n, b, c);
		else cout << query(1, 1, n, b, c) << "\n";
	}

	return 0;
}
