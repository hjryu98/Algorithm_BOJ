#include <iostream>
#include <algorithm>
using namespace std;

int n, m;
int arr[100005];
int tree[400020];

int init(int node, int s, int e) {
	if (s == e) return tree[node] = arr[s];

	int mid = (s + e) / 2;
	return tree[node] = min(init(node * 2, s, mid), init(node * 2 + 1, mid + 1, e));
}
int query(int node, int s, int e, int a, int b) {
	if (b < s || e < a) return 9999999999;

	if (a <= s && e <= b) return tree[node];

	int mid = (s + e) / 2;
	return min(query(node * 2, s, mid, a, b), query(node * 2 + 1, mid + 1, e, a, b));

}


int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	cin >> n >> m;

	for (int i = 1; i <= n; i++) cin >> arr[i];

	init(1, 1, n);

	while (m--) {
		int a, b;
		cin >> a >> b;
		cout << query(1, 1, n, a, b) << "\n";
	}
	return 0;
}
